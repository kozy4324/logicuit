module Logicuit
  module Circuits
    module Sequential
      # Program Counter
      class ProgramCounter < DSL
        def a: () -> Signals::Signal
        def b: () -> Signals::Signal
        def c: () -> Signals::Signal
        def d: () -> Signals::Signal
        def ld: () -> Signals::Signal
        def qa: () -> Signals::Signal
        def qb: () -> Signals::Signal
        def qc: () -> Signals::Signal
        def qd: () -> Signals::Signal
        class Struct
          attr_reader a: bool
          attr_reader b: bool
          attr_reader c: bool
          attr_reader d: bool
          attr_reader ld: bool
        end
        def self.outputs: (*Symbol args, **^() [self: Struct] -> bool kwargs) -> (nil | untyped)
        def self.assembling: () { () [self: instance] -> void } -> void
      end
    end
  end
end
